%{
#include "math.h"
int lines = 0;
%}

%option noyywrap

DIGIT [0-9]
NUMBER 0|[+-]?[1-9]{DIGIT}*
CHARACTER [a-zA-Z0-9]
STRING \"[a-zA-Z0-9 ]*\"
CONSTANT {NUMBER}|{STRING}
ID [a-zA-Z]([a-zA-Z]|[0-9]|\_)*{0,255}
INVALID_ID [0-9]([a-zA-Z]|[0-9]|\_)*{0,255}


%%


creste_valoarea { printf("Operator: %s\n", yytext); }
\- { printf("Operator: %s\n", yytext); }
\* { printf("Operator: %s\n", yytext); }
\/ { printf("Operator: %s\n", yytext); }
\% { printf("Operator: %s\n", yytext); }
\< { printf("Operator: %s\n", yytext); }
"<=" { printf("Operator: %s\n", yytext); }
primeste { printf("Operator: %s\n", yytext); }
">=" { printf("Operator: %s\n", yytext); }
\> { printf("Operator: %s\n", yytext); }
">>" { printf("Operator: %s\n", yytext); }
"<<" { printf("Operator: %s\n", yytext); }
egalite_fraternite { printf("Operator: %s\n", yytext); }

\; { printf("Separator: %s\n", yytext); }
\. { printf("Separator: %s\n", yytext); }
\: { printf("Separator: %s\n", yytext); }
\( { printf("Separator: %s\n", yytext); }
\) { printf("Separator: %s\n", yytext); }
\[ { printf("Separator: %s\n", yytext); }
\] { printf("Separator: %s\n", yytext); }
\{ { printf("Separator: %s\n", yytext); }
\} { printf("Separator: %s\n", yytext); }
\, { printf("Separator: %s\n", yytext); }

oare { printf("Reserved word: %s\n", yytext); }
nup { printf("Reserved word: %s\n", yytext); }
numar_intreg { printf("Reserved word: %s\n", yytext); }
da_la_pc { printf("Reserved word: %s\n", yytext); }
arata { printf("Reserved word: %s\n", yytext); }
parcurge { printf("Reserved word: %s\n", yytext); }
sir { printf("Reserved word: %s\n", yytext); }
de { printf("Reserved word: %s\n", yytext); }
caracter { printf("Reserved word: %s\n", yytext); }

{CONSTANT} { printf("Constant: %s\n", yytext); }
{ID} { printf("Identifier: %s\n", yytext); }

[ \t]+          {}
[\n]            {++lines;}
{INVALID_ID}    {printf("Illegal symbol: %s at line %u\n", yytext, lines+1); }
.               {printf("Illegal symbol: %s at line %u\n", yytext, lines+1); }  

%%

main( argc, argv )
int argc;
char **argv;
    {
        ++argv, --argc;	/* skip over program name */
        if ( argc > 0 )
            yyin = fopen( argv[0], "r" );
        else
            yyin = stdin;
    yylex();
    }

#ifndef yywrap
   yywrap() { return 1; }
#endif
